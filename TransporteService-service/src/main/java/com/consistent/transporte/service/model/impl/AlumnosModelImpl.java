/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.consistent.transporte.service.model.impl;

import com.consistent.transporte.service.model.Alumnos;
import com.consistent.transporte.service.model.AlumnosModel;
import com.consistent.transporte.service.model.AlumnosSoap;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Alumnos service. Represents a row in the &quot;Escuela_Alumnos&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AlumnosModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AlumnosImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AlumnosImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AlumnosModelImpl
	extends BaseModelImpl<Alumnos> implements AlumnosModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a alumnos model instance should use the <code>Alumnos</code> interface instead.
	 */
	public static final String TABLE_NAME = "Escuela_Alumnos";

	public static final Object[][] TABLE_COLUMNS = {
		{"matricula", Types.INTEGER}, {"nombre", Types.VARCHAR},
		{"apellido", Types.VARCHAR}, {"grupoId", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("matricula", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellido", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grupoId", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Escuela_Alumnos (matricula INTEGER not null primary key,nombre VARCHAR(75) null,apellido VARCHAR(75) null,grupoId INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table Escuela_Alumnos";

	public static final String ORDER_BY_JPQL =
		" ORDER BY alumnos.matricula ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Escuela_Alumnos.matricula ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Alumnos toModel(AlumnosSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Alumnos model = new AlumnosImpl();

		model.setMatricula(soapModel.getMatricula());
		model.setNombre(soapModel.getNombre());
		model.setApellido(soapModel.getApellido());
		model.setGrupoId(soapModel.getGrupoId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Alumnos> toModels(AlumnosSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Alumnos> models = new ArrayList<Alumnos>(soapModels.length);

		for (AlumnosSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AlumnosModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _matricula;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setMatricula(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _matricula;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Alumnos.class;
	}

	@Override
	public String getModelClassName() {
		return Alumnos.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Alumnos, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Alumnos, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alumnos, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Alumnos)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Alumnos, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Alumnos, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Alumnos)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Alumnos, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Alumnos, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Alumnos>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Alumnos.class.getClassLoader(), Alumnos.class, ModelWrapper.class);

		try {
			Constructor<Alumnos> constructor =
				(Constructor<Alumnos>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Alumnos, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Alumnos, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Alumnos, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Alumnos, Object>>();
		Map<String, BiConsumer<Alumnos, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Alumnos, ?>>();

		attributeGetterFunctions.put("matricula", Alumnos::getMatricula);
		attributeSetterBiConsumers.put(
			"matricula", (BiConsumer<Alumnos, Integer>)Alumnos::setMatricula);
		attributeGetterFunctions.put("nombre", Alumnos::getNombre);
		attributeSetterBiConsumers.put(
			"nombre", (BiConsumer<Alumnos, String>)Alumnos::setNombre);
		attributeGetterFunctions.put("apellido", Alumnos::getApellido);
		attributeSetterBiConsumers.put(
			"apellido", (BiConsumer<Alumnos, String>)Alumnos::setApellido);
		attributeGetterFunctions.put("grupoId", Alumnos::getGrupoId);
		attributeSetterBiConsumers.put(
			"grupoId", (BiConsumer<Alumnos, Integer>)Alumnos::setGrupoId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getMatricula() {
		return _matricula;
	}

	@Override
	public void setMatricula(int matricula) {
		_matricula = matricula;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@JSON
	@Override
	public String getApellido() {
		if (_apellido == null) {
			return "";
		}
		else {
			return _apellido;
		}
	}

	@Override
	public void setApellido(String apellido) {
		_apellido = apellido;
	}

	@JSON
	@Override
	public int getGrupoId() {
		return _grupoId;
	}

	@Override
	public void setGrupoId(int grupoId) {
		_grupoId = grupoId;
	}

	@Override
	public Alumnos toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Alumnos>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AlumnosImpl alumnosImpl = new AlumnosImpl();

		alumnosImpl.setMatricula(getMatricula());
		alumnosImpl.setNombre(getNombre());
		alumnosImpl.setApellido(getApellido());
		alumnosImpl.setGrupoId(getGrupoId());

		alumnosImpl.resetOriginalValues();

		return alumnosImpl;
	}

	@Override
	public int compareTo(Alumnos alumnos) {
		int primaryKey = alumnos.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Alumnos)) {
			return false;
		}

		Alumnos alumnos = (Alumnos)obj;

		int primaryKey = alumnos.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Alumnos> toCacheModel() {
		AlumnosCacheModel alumnosCacheModel = new AlumnosCacheModel();

		alumnosCacheModel.matricula = getMatricula();

		alumnosCacheModel.nombre = getNombre();

		String nombre = alumnosCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			alumnosCacheModel.nombre = null;
		}

		alumnosCacheModel.apellido = getApellido();

		String apellido = alumnosCacheModel.apellido;

		if ((apellido != null) && (apellido.length() == 0)) {
			alumnosCacheModel.apellido = null;
		}

		alumnosCacheModel.grupoId = getGrupoId();

		return alumnosCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Alumnos, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Alumnos, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alumnos, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Alumnos)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Alumnos, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Alumnos, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alumnos, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Alumnos)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Alumnos>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private int _matricula;
	private String _nombre;
	private String _apellido;
	private int _grupoId;
	private Alumnos _escapedModel;

}